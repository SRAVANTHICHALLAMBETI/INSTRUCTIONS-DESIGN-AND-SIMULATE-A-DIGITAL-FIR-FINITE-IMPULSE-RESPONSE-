#verilog code

`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 07/21/2025 03:23:17 PM
// Design Name: 
// Module Name: task4
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

module fir_filter (
    input clk,
    input reset,
    input signed [7:0] x_in,  // 8-bit input sample
    output reg signed [15:0] y_out  // 16-bit output
);

parameter N = 4;

// Example coefficients
reg signed [7:0] h [0:N-1];  // 8-bit filter coefficients
reg signed [7:0] x [0:N-1];  // Delay line for inputs

integer i;

initial begin
    h[0] = 8'd2;
    h[1] = 8'd4;
    h[2] = 8'd4;
    h[3] = 8'd2;
end

always @(posedge clk) begin
    if (reset) begin
        for (i = 0; i < N; i = i + 1)
            x[i] <= 0;
        y_out <= 0;
    end else begin
        // Shift the delay line
        for (i = N-1; i > 0; i = i - 1)
            x[i] <= x[i-1];
        x[0] <= x_in;

        // FIR sum
        y_out <= (h[0]*x[0] + h[1]*x[1] + h[2]*x[2] + h[3]*x[3]);
    end
end

endmodule

#testbench

module fir_filter_tb();

reg clk;
reg reset;
reg signed [7:0] x_in;
wire signed [15:0] y_out;

fir_filter uut (
    .clk(clk),
    .reset(reset),
    .x_in(x_in),
    .y_out(y_out)
);

// Clock generation
always #5 clk = ~clk;

initial begin
    $dumpfile("fir_filter.vcd");
    $dumpvars(0, fir_filter_tb);

    clk = 0;
    reset = 1;
    x_in = 0;

    #10 reset = 0;

    // Input test samples
    x_in = 10;  #10;
    x_in = 20;  #10;
    x_in = 30;  #10;
    x_in = 40;  #10;
    x_in = 0;   #50;

    $finish;
end

endmodule
